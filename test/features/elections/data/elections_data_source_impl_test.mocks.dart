// Mocks generated by Mockito 5.4.0 from annotations
// in elections/test/features/elections/data/elections_data_source_impl_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:cloud_firestore/cloud_firestore.dart' as _i2;
import 'package:elections/core/constants/params.dart' as _i7;
import 'package:elections/core/services/authFirebaseService/base_auth_service.dart'
    as _i6;
import 'package:elections/core/services/firestoreFirebaseService/base_firestore_service.dart'
    as _i4;
import 'package:firebase_auth/firebase_auth.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeQuerySnapshot_0<T extends Object?> extends _i1.SmartFake
    implements _i2.QuerySnapshot<T> {
  _FakeQuerySnapshot_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeUserCredential_1 extends _i1.SmartFake
    implements _i3.UserCredential {
  _FakeUserCredential_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [BaseFireStoreService].
///
/// See the documentation for Mockito's code generation for more information.
class MockBaseFireStoreService extends _i1.Mock
    implements _i4.BaseFireStoreService {
  MockBaseFireStoreService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<void> saveDataToFireStoreWithId(
    Map<String, dynamic>? saveDataToFireStoreMap,
    String? collectionName,
    String? collectionDocId,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #saveDataToFireStoreWithId,
          [
            saveDataToFireStoreMap,
            collectionName,
            collectionDocId,
          ],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);
  @override
  _i5.Future<_i2.QuerySnapshot<Map<String, dynamic>>> readDataFromFireStore(
          String? collectionName) =>
      (super.noSuchMethod(
        Invocation.method(
          #readDataFromFireStore,
          [collectionName],
        ),
        returnValue: _i5.Future<_i2.QuerySnapshot<Map<String, dynamic>>>.value(
            _FakeQuerySnapshot_0<Map<String, dynamic>>(
          this,
          Invocation.method(
            #readDataFromFireStore,
            [collectionName],
          ),
        )),
      ) as _i5.Future<_i2.QuerySnapshot<Map<String, dynamic>>>);
  @override
  _i5.Future<dynamic> updateDataToFireStore(
    Map<String, dynamic>? updateDataToFireStoreMap,
    String? collectionName,
    String? collectionDocId,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateDataToFireStore,
          [
            updateDataToFireStoreMap,
            collectionName,
            collectionDocId,
          ],
        ),
        returnValue: _i5.Future<dynamic>.value(),
      ) as _i5.Future<dynamic>);
  @override
  _i5.Stream<_i2.DocumentSnapshot<Map<String, dynamic>>> getDocDataAsSnapshot(
    String? collectionName,
    String? collectionDocId,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #getDocDataAsSnapshot,
          [
            collectionName,
            collectionDocId,
          ],
        ),
        returnValue:
            _i5.Stream<_i2.DocumentSnapshot<Map<String, dynamic>>>.empty(),
      ) as _i5.Stream<_i2.DocumentSnapshot<Map<String, dynamic>>>);
}

/// A class which mocks [BaseAuthService].
///
/// See the documentation for Mockito's code generation for more information.
class MockBaseAuthService extends _i1.Mock implements _i6.BaseAuthService {
  MockBaseAuthService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<_i3.UserCredential> signInWithEmailAndPassword(
          _i7.SignInUserParams? signInUserParams) =>
      (super.noSuchMethod(
        Invocation.method(
          #signInWithEmailAndPassword,
          [signInUserParams],
        ),
        returnValue: _i5.Future<_i3.UserCredential>.value(_FakeUserCredential_1(
          this,
          Invocation.method(
            #signInWithEmailAndPassword,
            [signInUserParams],
          ),
        )),
      ) as _i5.Future<_i3.UserCredential>);
  @override
  _i5.Future<_i3.UserCredential> createUserWithEmailAndPassword(
          _i7.CreateUserParams? createUserParams) =>
      (super.noSuchMethod(
        Invocation.method(
          #createUserWithEmailAndPassword,
          [createUserParams],
        ),
        returnValue: _i5.Future<_i3.UserCredential>.value(_FakeUserCredential_1(
          this,
          Invocation.method(
            #createUserWithEmailAndPassword,
            [createUserParams],
          ),
        )),
      ) as _i5.Future<_i3.UserCredential>);
  @override
  _i5.Future<void> signOut() => (super.noSuchMethod(
        Invocation.method(
          #signOut,
          [],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);
}
